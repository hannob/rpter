#!/usr/bin/python3

import argparse
import datetime
import email
import glob
import gzip
import io
import json
import os
import shutil
import sys
import zipfile

import dateutil.tz
import xmltodict

count = {}

fcount = {}
tcount = {}

dkimfailmsg = ""
spffailmsg = ""
dispositionfailmsg = ""
warnmsg = ""


def ts2local(ts):
    ts = int(ts)
    return datetime.datetime.fromtimestamp(ts, dateutil.tz.tzlocal())


def xadd(xtype, dfrom, org, n=1):
    if xtype not in fcount:
        fcount[xtype] = {}
    if dfrom not in fcount[xtype]:
        fcount[xtype][dfrom] = 0

    fcount[xtype][dfrom] += n

    if xtype not in tcount:
        tcount[xtype] = {}
    if org not in tcount[xtype]:
        tcount[xtype][org] = 0

    tcount[xtype][org] += n

    if xtype not in count:
        count[xtype] = 0
    count[xtype] += n


def tlsrptparse(indata):
    j = json.loads(indata)
    for p in j["policies"]:
        if p["summary"]["total-successful-session-count"] > 0:
            xadd(
                "tlsrpt_good",
                p["policy"]["policy-domain"],
                j["organization-name"],
                p["summary"]["total-successful-session-count"],
            )
        if p["summary"]["total-failure-session-count"] > 0:
            xadd(
                "tlsrpt_good",
                p["policy"]["policy-domain"],
                j["organization-name"],
                p["summary"]["total-failure-session-count"],
            )


def dmarc(indata):
    global dkimfailmsg, spffailmsg, dispositionfailmsg
    j = xmltodict.parse(indata)
    if "record" not in j["feedback"]:
        return
    recs = j["feedback"]["record"]
    if isinstance(recs, dict):
        recs = [recs]

    org = j["feedback"]["report_metadata"]["org_name"]
    begin = ts2local(j["feedback"]["report_metadata"]["date_range"]["begin"])
    end = ts2local(j["feedback"]["report_metadata"]["date_range"]["end"])

    for r in recs:
        rows = r["row"]

        if isinstance(rows, dict):
            rows = [rows]

        for row in rows:
            pol = row["policy_evaluated"]
            for x in ["dkim", "spf", "disposition"]:
                xadd(f"{x}_{pol[x]}", r["identifiers"]["header_from"], org)

            if pol["disposition"] != "none":
                dispositionfailmsg += f"Disposition {pol['disposition']} from {org}\n"
                dispositionfailmsg += f"Timeframe {begin} - {end}\n{r}\n\n"

            if pol["dkim"] != "pass":
                dkimfailmsg += f"DKIM did not pass ({pol['dkim']}) from {org}\n"
                dkimfailmsg += f"Timeframe {begin} - {end}\n{r}\n\n"

            if pol["spf"] != "pass":
                spffailmsg += f"SPF did not pass ({pol['spf']}) from {org}\n"
                spffailmsg += f"Timeframe {begin} - {end}\n{r}\n\n"


def parser(filename, indata):
    global warnmsg
    if filename.endswith(".json"):
        # this is tls rpt
        tlsrptparse(indata)

    if filename.endswith(".xml"):
        # this is dmarc
        try:
            dmarc(indata)
        except KeyError as e:
            warnmsg += f"Incorrect reporting format in {filename}, key {e}\n"


ap = argparse.ArgumentParser()
ap.add_argument("dirs", nargs="+", help="Path to maildirs to check")
ap.add_argument("-v", "--verbose", action="store_true", help="show also good results")
ap.add_argument("-a,", "--archive", help="Dir to store archived versions")
args = ap.parse_args()

if args.archive:
    now = datetime.datetime.now(tz=dateutil.tz.tzlocal())
    now = now.isoformat(timespec="minutes")
    nowdir = f"{args.archive}/{now}"

for mdir in args.dirs:
    for d in ["cur", "new", "tmp"]:
        if not os.path.isdir(f"{mdir}/{d}"):
            sys.exit(f"Error: {mdir} not a maildir")
    for fmail in glob.glob(f"{mdir}/cur/*") + glob.glob(f"{mdir}/new/*"):
        with open(fmail, "rb") as f:
            e = email.message_from_binary_file(f)
            dparts = 0
            for part in e.walk():
                ct = part.get_content_type()
                fn = part.get_filename()
                if not isinstance(fn, str):
                    continue
                if fn.endswith(".gz"):
                    if fn.endswith(".gz"):
                        fn = fn[0:-3]
                    data = gzip.decompress(part.get_payload(decode=True))
                    dparts += 1
                    parser(fn, data)

                if ct == "application/zip":
                    bdata = part.get_payload(decode=True)
                    ifo = io.BytesIO(bdata)
                    with zipfile.ZipFile(ifo) as fzip:
                        for x in fzip.namelist():
                            data = fzip.read(x)
                            dparts += 1
                            parser(x, data)
            if dparts == 0:
                warnmsg += f"WARNING: No data found in {fmail}\n"
            if dparts > 1:
                warnmsg += f"WARNING: {dparts} files found, expected 1\n"
        if args.archive:
            if not os.path.isdir(nowdir):
                os.mkdir(nowdir)
                os.mkdir(f"{nowdir}/cur")
                os.mkdir(f"{nowdir}/new")
                os.mkdir(f"{nowdir}/tmp")
            shutil.move(fmail, f"{nowdir}/cur")

if count != {}:
    print("All:")
    print(json.dumps(dict(sorted(count.items())), indent=2))
    print("")
    print("Grouped by from domain:")
    print(json.dumps(dict(sorted(fcount.items())), indent=2))
    print("")
    print("Grouped by reporting org:")
    print(json.dumps(dict(sorted(tcount.items())), indent=2))
    print("")
    print(warnmsg)
    print("")
    print(dispositionfailmsg, end="")
    print(dkimfailmsg, end="")
    print(spffailmsg, end="")
